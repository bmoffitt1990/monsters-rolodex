{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","name","email","className","alt","src","id","CardList","monsters","map","key","SearchBar","placeHolder","handleSearch","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAIaA,G,YAAO,SAAAC,GAAU,IAAD,EAIrBA,EAAMC,QAFNC,EAFqB,EAErBA,KACAC,EAHqB,EAGrBA,MAEJ,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BN,EAAMC,QAAQM,GAAxC,4BACtB,4BAAKL,GACL,2BAAIC,MCNHK,EAAW,SAAAR,GAAU,IAE1BS,EACIT,EADJS,SAEJ,OACI,yBAAKL,UAAU,aAEPK,EAASC,IAAI,SAAAT,GAAO,OAAI,kBAAC,EAAD,CAAMU,IAAKV,EAAQM,GAAIN,QAASA,QCO3DW,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,2BACIV,UAAW,SACXW,KAAK,SACLC,YAAaH,EACbI,SAAUH,MC2BPI,G,kBA1Cb,aAAc,IAAD,8BACX,+CAeFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAM,CACTf,SAAS,GACTY,YAAY,GACZR,YAAa,mBANJ,E,iFAUO,IAAD,OACjBY,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAASoB,Q,+BAOhC,IAAD,EAKJC,KAAKN,MAHLf,EAFI,EAEJA,SACAY,EAHI,EAGJA,YACAR,EAJI,EAIJA,YAGIkB,EAAmBtB,EAASuB,OAAO,SAAA/B,GAAO,OAC9CA,EAAQC,KAAK+B,cAAcC,SAASb,EAAYY,iBAElD,OACA,yBAAK7B,UAAU,OACf,iDACE,kBAAC,EAAD,CAAWU,aAAcgB,KAAKhB,aAAcD,YAAaA,IACzD,kBAAC,EAAD,CAAUJ,SAAUsB,S,GAnCRI,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.75d5ac52.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = props => {\n    const {\n        name, \n        email\n    } = props.monster;\n    return(\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n\n\n}\n\n","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component'\n\n\n//this should only think about what it should add, it shouldnt think about how to create them.\n//The card component will do that\nexport const CardList = props => {\n    const {\n        monsters\n        } = props;\n    return (\n        <div className=\"card-list\">\n            {\n                monsters.map(monster => <Card key={monster.id} monster={monster} />)\n            }\n        </div>\n        )\n}","import React from 'react'\nimport './search-bar.styles.css'\n\n//this was my method. I did this so I could destructure the handleSearch...\n//I wanted to make it a functional (stateless) component, but I didnt know how to destructure using that method\n/*\nclass SearchBar extends Component{\n\n    render(){\n        const {handleSearch} = this.props\n        return(\n            <input \n            className ='search'\n            type='search' \n            placeholder='search monsters' \n            onChange={(e) => {handleSearch(e)} }\n          />\n        )\n    }\n}*/\n\nexport const SearchBar = ({placeHolder, handleSearch}) => (\n        <input \n            className ='search'\n            type='search' \n            placeholder={placeHolder} \n            onChange={handleSearch}\n      />\n)\n\n","import React, {Component} from 'react';\nimport { CardList} from './components/card-list/card-list.component';\nimport { SearchBar }  from './components/search-bar/search-bar.component';\nimport './App.css';\n\n//When we type stuff into the search field and console.log the state, we see that it is one letter behind all the time.\n// this is because setState asynchronous...what that means right now is that this.setState is not happening immediately. It is not happening when we expect it to. \n\n//if we want to do somehting with our state right after we set it, we put in a call back function as the second argument for setState\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      searchField:'',\n      placeHolder: 'Search Monsters'\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  handleSearch = (e) =>{\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n    const {\n      monsters,\n      searchField,\n      placeHolder \n  } = this.state;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return(\n    <div className=\"App\">\n    <h1> Monsters Rolodex</h1>\n      <SearchBar handleSearch={this.handleSearch} placeHolder={placeHolder}/>\n      <CardList monsters={filteredMonsters}/>\n    </div>\n    )\n  }\n    \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}